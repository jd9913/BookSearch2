[{"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\index.js":"1","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\App.js":"2","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\pages\\SearchBooks.js":"3","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\pages\\SavedBooks.js":"4","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\components\\Navbar.js":"5","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\auth.js":"6","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\localStorage.js":"7","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\components\\LoginForm.js":"8","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\components\\SignupForm.js":"9","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\mutations.js":"10","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\API.js":"11","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\queries.js":"12"},{"size":266,"mtime":1609784418116,"results":"13","hashOfConfig":"14"},{"size":1043,"mtime":1609982575644,"results":"15","hashOfConfig":"14"},{"size":4966,"mtime":1609982575646,"results":"16","hashOfConfig":"14"},{"size":2430,"mtime":1609982575645,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1609784418155,"results":"18","hashOfConfig":"14"},{"size":1234,"mtime":1609784418254,"results":"19","hashOfConfig":"14"},{"size":793,"mtime":1609784418271,"results":"20","hashOfConfig":"14"},{"size":2458,"mtime":1609982575644,"results":"21","hashOfConfig":"14"},{"size":3221,"mtime":1609982685888,"results":"22","hashOfConfig":"14"},{"size":1491,"mtime":1609982575647,"results":"23","hashOfConfig":"14"},{"size":1598,"mtime":1609982575646,"results":"24","hashOfConfig":"14"},{"size":290,"mtime":1609982575647,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1xnx6dp",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\index.js",[],["53","54"],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\App.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\pages\\SearchBooks.js",["55","56"],"import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport SavedBooks from './SavedBooks';\r\n\r\nconst SearchBooks = () => {\r\n  const [saveBook, { error }]= useMutation(SAVE_BOOK);\r\n\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { bookData } = await saveBook({\r\n        variables: { input: SavedBooks }\r\n      });\r\n\r\n           \r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\pages\\SavedBooks.js",["57","58"],"import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\n\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport { GET_USER } from '../utils/queries';\r\n\r\nconst SavedBooks = () => {\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n  const { loading, data }=useQuery(GET_USER);\r\n  const userData=data?.me||[];\r\n\r\n \r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n\r\n      try {\r\n        const { data } = await removeBook({\r\n          variables: { bookId }\r\n        });\r\n  \r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\components\\Navbar.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\auth.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\mutations.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\API.js",[],"C:\\Users\\tiriw\\projects\\Repositories\\Weekly Challenges\\BookSearch2\\client\\src\\utils\\queries.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":12,"column":22,"nodeType":"65","messageId":"66","endLine":12,"endColumn":27},{"ruleId":"63","severity":1,"message":"67","line":74,"column":15,"nodeType":"65","messageId":"66","endLine":74,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":13,"column":24,"nodeType":"65","messageId":"66","endLine":13,"endColumn":29},{"ruleId":"63","severity":1,"message":"68","line":29,"column":17,"nodeType":"65","messageId":"66","endLine":29,"endColumn":21},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'bookData' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]